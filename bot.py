import asyncio
import logging
import aiosqlite
import pandas as pd
from datetime import datetime, date
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton
)



logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ‚úÖ ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ì
async def init_db():
    async with aiosqlite.connect("finance.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT,
                type TEXT,
                amount REAL,
                source TEXT
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS excel_files (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                file_name TEXT,
                upload_date TEXT
            )
        """)
        await db.commit()

# ‚úÖ ‰øùÂ≠ò‰∫§ÊòìËÆ∞ÂΩï
async def save_transaction(date, t_type, amount, source):
    async with aiosqlite.connect("finance.db") as db:
        await db.execute(
            "INSERT INTO transactions (date, type, amount, source) VALUES (?, ?, ?, ?)",
            (date, t_type, amount, source)
        )
        await db.commit()

# ‚úÖ ‰øùÂ≠ò Excel Êñá‰ª∂‰ø°ÊÅØ
async def save_excel_info(file_name):
    upload_date = datetime.now().strftime("%Y-%m-%d")
    async with aiosqlite.connect("finance.db") as db:
        await db.execute(
            "INSERT INTO excel_files (file_name, upload_date) VALUES (?, ?)",
            (file_name, upload_date)
        )
        await db.commit()

# ‚úÖ Ëé∑ÂèñÁªüËÆ°
async def get_summary(target_date=None):
    async with aiosqlite.connect("finance.db") as db:
        if target_date:
            cursor = await db.execute("SELECT type, amount FROM transactions WHERE date = ?", (target_date,))
        else:
            cursor = await db.execute("SELECT type, amount FROM transactions")
        rows = await cursor.fetchall()

    income = sum(r[1] for r in rows if r[0] == "income")
    expense = sum(r[1] for r in rows if r[0] == "expense")
    return income, expense, income - expense

# ‚úÖ Ëé∑Âèñ Excel Êñá‰ª∂ÔºàÊåâ‰∏ä‰º†Êó•ÊúüÔºâ
async def get_excel_files_by_date(target_date):
    async with aiosqlite.connect("finance.db") as db:
        cursor = await db.execute("SELECT file_name FROM excel_files WHERE upload_date = ?", (target_date,))
        files = await cursor.fetchall()
    return [f[0] for f in files]

# ‚úÖ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí∞ –ö—ñ—Ä—ñ—Å “õ–æ—Å—É", switch_inline_query_current_chat="/add income "),
            InlineKeyboardButton(text="üí∏ –®—ã“ì—ã–Ω “õ–æ—Å—É", switch_inline_query_current_chat="/add expense "),
        ],
        [
            InlineKeyboardButton(text="üìä –ñ–∞–ª–ø—ã –µ—Å–µ–ø", switch_inline_query_current_chat="/summary"),
            InlineKeyboardButton(text="üìÖ –ë“Ø–≥—ñ–Ω–≥—ñ –µ—Å–µ–ø", switch_inline_query_current_chat="/today"),
        ],
        [
            InlineKeyboardButton(text="üì§ Excel –∂“Ø–∫—Ç–µ—É", switch_inline_query_current_chat="/upload"),
            InlineKeyboardButton(text="üìÇ Excel –∞–ª—É", switch_inline_query_current_chat="/getexcel "),
        ]
    ])

    await message.answer(
        "–°”ô–ª–µ–º! –ú–µ–Ω —Å—ñ–∑–¥—ñ“£ “õ–∞—Ä–∂—ã–ª—ã“õ –∫”©–º–µ–∫—à—ñ“£—ñ–∑–º—ñ–Ω ü§ñ\n\n"
        "–ú–∞“ì–∞–Ω Excel —Ñ–∞–π–ª—ã–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ —Ç”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑:\n"
        "`/add income 2000` –Ω–µ–º–µ—Å–µ `/add expense 500`\n\n"
        "üìä –°–æ–Ω–¥–∞–π-–∞“õ:\n"
        "`/summary` ‚Äî –±–∞—Ä–ª—ã“õ –∫—ñ—Ä—ñ—Å/—à—ã“ì—ã—Å—Ç—ã –∫”©—Ä—É\n"
        "`/today` ‚Äî –±“Ø–≥—ñ–Ω–≥—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–Ω—ã –∫”©—Ä—É\n"
        "`/summary 2025-10-04` ‚Äî –±–µ–ª–≥—ñ–ª—ñ –∫“Ø–Ω–¥—ñ –∫”©—Ä—É",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

# ‚úÖ /add
@dp.message(Command("add"))
async def add_manual(message: Message):
    try:
        args = message.text.split()
        if len(args) != 3:
            raise ValueError
        t_type = args[1].lower()
        amount = float(args[2])
        if t_type not in ["income", "expense"]:
            await message.answer("‚ùå –¢“Ø—Ä—ñ–Ω –¥“±—Ä—ã—Å –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑: income –Ω–µ–º–µ—Å–µ expense")
            return

        date_now = datetime.now().strftime("%Y-%m-%d")
        await save_transaction(date_now, t_type, amount, "manual")
        await message.answer(f"‚úÖ {t_type} {amount} —Ç–≥ {date_now} –∫“Ø–Ω—ñ —Å–∞“õ—Ç–∞–ª–¥—ãÔºÅ")

    except Exception:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç “õ–∞—Ç–µ. –ú—ã—Å–∞–ª—ã: `/add income 2000`", parse_mode="Markdown")

# ‚úÖ /summary
@dp.message(Command("summary"))
async def cmd_summary(message: Message):
    args = message.text.split()
    target_date = args[1] if len(args) == 2 else None
    income, expense, balance = await get_summary(target_date)
    title = f"üìÖ {target_date} –∫“Ø–Ω–≥—ñ –µ—Å–µ–ø:" if target_date else "üìä –ñ–∞–ª–ø—ã –µ—Å–µ–ø:"
    await message.answer(f"{title}\nüí∞ –ö—ñ—Ä—ñ—Å: {income:.2f} —Ç–≥\nüí∏ –®—ã“ì—ã–Ω: {expense:.2f} —Ç–≥\n‚öñÔ∏è –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ç–≥")

# ‚úÖ /today
@dp.message(Command("today"))
async def cmd_today(message: Message):
    today_str = date.today().strftime("%Y-%m-%d")
    income, expense, balance = await get_summary(today_str)
    await message.answer(
        f"üìÖ –ë“Ø–≥—ñ–Ω–≥—ñ ({today_str}) –µ—Å–µ–ø:\n"
        f"üí∞ –ö—ñ—Ä—ñ—Å: {income:.2f} —Ç–≥\nüí∏ –®—ã“ì—ã–Ω: {expense:.2f} —Ç–≥\n‚öñÔ∏è –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ç–≥"
    )

# ‚úÖ /getexcel
@dp.message(Command("getexcel"))
async def cmd_getexcel(message: Message):
    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ùå “ö–∞—Ç–µ —Ñ–æ—Ä–º–∞—Ç. –ú—ã—Å–∞–ª—ã: `/getexcel 2025-10-04`")
        return

    target_date = args[1]
    files = await get_excel_files_by_date(target_date)
    if not files:
        await message.answer(f"üìÇ {target_date} “Ø—à—ñ–Ω –µ—à“õ–∞–Ω–¥–∞–π Excel —Ç–∞–±—ã–ª–º–∞–¥—ã.")
        return

    for file_name in files:
        with open(file_name, "rb") as f:
            await bot.send_document(message.chat.id, f, caption=f"üìé {file_name}")

# ‚úÖ /upload
@dp.message(Command("upload"))
async def cmd_upload(message: Message):
    await message.answer("üì§ Excel —Ñ–∞–π–ª—ã–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ (.xlsx –Ω–µ–º–µ—Å–µ .xls), –º–µ–Ω –æ–Ω—ã —Ç–∞–ª–¥–∞–ø —Å–∞“õ—Ç–∞–π–º—ã–Ω.")

# ‚úÖ Êé•Êî∂ Excel Êñá‰ª∂
@dp.message(lambda msg: msg.document)
async def handle_excel_file(message: Message):
    file_name = message.document.file_name
    if not (file_name.endswith(".xlsx") or file_name.endswith(".xls")):
        await message.answer("‚ùå –¢–µ–∫ Excel —Ñ–∞–π–ª–¥–∞—Ä—ã–Ω (.xlsx –Ω–µ–º–µ—Å–µ .xls) “õ–∞–±—ã–ª–¥–∞–π–º—ã–Ω.")
        return

    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    await bot.download_file(file.file_path, file_name)
    await save_excel_info(file_name)

    try:
        df = pd.read_excel(file_name)
        count = 0
        for _, row in df.iterrows():
            date_val = str(row.get("Date", datetime.now().strftime("%Y-%m-%d")))
            t_type = str(row.get("Type", "income")).lower()
            amount = float(row.get("Amount", 0))
            await save_transaction(date_val, t_type, amount, "excel")
            count += 1
        await message.answer(f"üìä –§–∞–π–ª '{file_name}' –∂“Ø–∫—Ç–µ–ª–¥—ñ –∂”ô–Ω–µ {count} –∂–∞–∑–±–∞ —Å–∞“õ—Ç–∞–ª–¥—ã!")
    except Exception as e:
        await message.answer(f"‚ùå Excel –æ“õ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e}")

# ‚úÖ ÂêØÂä®‰∏ªÁ®ãÂ∫è
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
